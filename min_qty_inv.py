import psycopg2
import csv
import zipfile
from datetime import datetime

brand_names = {
    "1": "HQ", "2": "BL", "3": "VEN", "4": "CUR", "5": "B+"
}
outlet_ids = {
    "1": "EX-HQ", "2": "BL-Mid Valley", "3": "BL-Desa ParkCity",
    "4": "BL-Pavilion Bukit Jalil", "5": "BPLUS-SJ", "6": "BPLUS-Kota Damansara",
    "8": "BPLUS-SV2", "9": "BL-HQ", "11": "BL-1 Utama", "12": "BL-EkoCheras",
    "13": "BL-Setia City Mall", "18": "CUR-IOI Mall Damansara",
    "19": "CUR-Publika", "20": "CUR-Mid Valley", "24": "CUR-Pavilion Bukit Jalil",
    "25": "Ven-HQ", "26": "VEN-IOI Mall Damansara", "27": "VEN-Mid Valley",
    "31": "VEN-Pavilion Bukit Jalil", "32": "BPLUS-HQ", "33": "BPLUS-Damansara Utama",
    "36": "BPLUS-Pavilion Bukit Jalil", "37": "BPLUS-SJ2"
}

# --- Flat min qty mapping: (productInventoryId, outletId) -> min_qty
min_qty_settings = {
("434", "11"): 3,
("435","11"):3,
("655","11"):3,
("437","11"):2,
("439","11"):2,
("587","11"):3,
("443","11"):2,
("659","11"):3,
("449","11"):0,
("451","11"):2,
("453","11"):3,
("455","11"):3,
("457","11"):3,
("459","11"):0,
("461","11"):2,
("464","11"):2,
("466","11"):0,
("468","11"):2,
("470","11"):0,
("476","11"):0,
("477","11"):20,
("478","11"):6,
("652","11"):0,
("653","11"):0,
("481","11"):0,
("482","11"):0,
("650","11"):0,
("651","11"):0,
("485","11"):0,
("486","11"):0,
("488","11"):2,
("489","11"):10,
("492","11"):0,
("494","11"):50,
("495","11"):20,
("497","11"):0,
("499","11"):0,
("500","11"):1,
("501","11"):2,
("434","13"):3,
("435","13"):3,
("655","13"):3,
("437","13"):2,
("439","13"):2,
("587","13"):3,
("443","13"):2,
("659","13"):3,
("449","13"):0,
("451","13"):2,
("453","13"):3,
("455","13"):3,
("457","13"):3,
("459","13"):0,
("461","13"):2,
("464","13"):2,
("466","13"):0,
("468","13"):2,
("470","13"):0,
("476","13"):0,
("477","13"):20,
("478","13"):6,
("652","13"):0,
("653","13"):0,
("481","13"):0,
("482","13"):0,
("650","13"):0,
("651","13"):0,
("485","13"):0,
("486","13"):0,
("488","13"):2,
("489","13"):10,
("492","13"):0,
("494","13"):50,
("495","13"):20,
("497","13"):0,
("499","13"):0,
("500","13"):1,
("501","13"):2,
("434","2"):6,
("435","2"):6,
("655","2"):6,
("437","2"):3,
("439","2"):3,
("587","2"):8,
("443","2"):3,
("659","2"):6,
("449","2"):0,
("451","2"):6,
("453","2"):5,
("455","2"):5,
("457","2"):5,
("459","2"):0,
("461","2"):6,
("464","2"):3,
("466","2"):0,
("468","2"):3,
("470","2"):0,
("476","2"):0,
("477","2"):30,
("478","2"):10,
("652","2"):0,
("653","2"):0,
("481","2"):0,
("482","2"):0,
("650","2"):0,
("651","2"):0,
("485","2"):0,
("486","2"):0,
("488","2"):3,
("489","2"):30,
("492","2"):0,
("494","2"):100,
("495","2"):20,
("497","2"):0,
("499","2"):0,
("500","2"):2,
("501","2"):3,
("434","12"):6,
("435","12"):6,
("655","12"):6,
("437","12"):3,
("439","12"):3,
("587","12"):8,
("443","12"):3,
("659","12"):6,
("449","12"):0,
("451","12"):6,
("453","12"):5,
("455","12"):5,
("457","12"):5,
("459","12"):0,
("461","12"):6,
("464","12"):3,
("466","12"):0,
("468","12"):3,
("470","12"):0,
("476","12"):0,
("477","12"):30,
("478","12"):10,
("652","12"):0,
("653","12"):0,
("481","12"):0,
("482","12"):0,
("650","12"):0,
("651","12"):0,
("485","12"):0,
("486","12"):0,
("488","12"):3,
("489","12"):30,
("492","12"):0,
("494","12"):100,
("495","12"):20,
("497","12"):0,
("499","12"):0,
("500","12"):2,
("501","12"):3,
("434","4"):6,
("435","4"):6,
("655","4"):6,
("437","4"):3,
("439","4"):3,
("587","4"):8,
("443","4"):3,
("659","4"):6,
("449","4"):0,
("451","4"):6,
("453","4"):5,
("455","4"):5,
("457","4"):5,
("459","4"):0,
("461","4"):6,
("464","4"):3,
("466","4"):0,
("468","4"):3,
("470","4"):0,
("476","4"):0,
("477","4"):30,
("478","4"):10,
("652","4"):0,
("653","4"):0,
("481","4"):0,
("482","4"):0,
("650","4"):0,
("651","4"):0,
("485","4"):0,
("486","4"):0,
("488","4"):3,
("489","4"):30,
("492","4"):0,
("494","4"):100,
("495","4"):20,
("497","4"):0,
("499","4"):0,
("500","4"):2,
("501","4"):3,
("434","3"):6,
("435","3"):6,
("655","3"):6,
("437","3"):3,
("439","3"):3,
("587","3"):8,
("443","3"):3,
("659","3"):6,
("449","3"):0,
("451","3"):6,
("453","3"):5,
("455","3"):5,
("457","3"):5,
("459","3"):0,
("461","3"):6,
("464","3"):3,
("466","3"):0,
("468","3"):3,
("470","3"):0,
("476","3"):0,
("477","3"):30,
("478","3"):10,
("652","3"):0,
("653","3"):0,
("481","3"):0,
("482","3"):0,
("650","3"):0,
("651","3"):0,
("485","3"):0,
("486","3"):0,
("488","3"):3,
("489","3"):30,
("492","3"):0,
("494","3"):100,
("495","3"):20,
("497","3"):0,
("499","3"):0,
("500","3"):2,
("501","3"):3,
("434","33"):5,
("435","33"):5,
("655","33"):5,
("437","33"):2,
("439","33"):2,
("587","33"):6,
("443","33"):2,
("659","33"):5,
("449","33"):0,
("451","33"):4,
("453","33"):4,
("455","33"):4,
("457","33"):4,
("459","33"):0,
("461","33"):2,
("464","33"):2,
("466","33"):0,
("468","33"):2,
("470","33"):0,
("476","33"):0,
("477","33"):20,
("478","33"):6,
("652","33"):0,
("653","33"):0,
("481","33"):0,
("482","33"):0,
("650","33"):0,
("651","33"):0,
("485","33"):0,
("486","33"):0,
("488","33"):2,
("489","33"):10,
("492","33"):0,
("494","33"):100,
("495","33"):20,
("497","33"):0,
("499","33"):0,
("500","33"):2,
("501","33"):3,
("434","6"):5,
("435","6"):5,
("655","6"):5,
("437","6"):2,
("439","6"):2,
("587","6"):6,
("443","6"):2,
("659","6"):5,
("449","6"):0,
("451","6"):4,
("453","6"):4,
("455","6"):4,
("457","6"):4,
("459","6"):0,
("461","6"):2,
("464","6"):2,
("466","6"):0,
("468","6"):2,
("470","6"):0,
("476","6"):0,
("477","6"):20,
("478","6"):6,
("652","6"):0,
("653","6"):0,
("481","6"):0,
("482","6"):0,
("650","6"):0,
("651","6"):0,
("485","6"):0,
("486","6"):0,
("488","6"):2,
("489","6"):10,
("492","6"):0,
("494","6"):100,
("495","6"):20,
("497","6"):0,
("499","6"):0,
("500","6"):2,
("501","6"):3,
("434","36"):5,
("435","36"):5,
("655","36"):5,
("437","36"):2,
("439","36"):2,
("587","36"):6,
("443","36"):2,
("659","36"):5,
("449","36"):0,
("451","36"):4,
("453","36"):4,
("455","36"):4,
("457","36"):4,
("459","36"):0,
("461","36"):2,
("464","36"):2,
("466","36"):0,
("468","36"):2,
("470","36"):0,
("476","36"):0,
("477","36"):20,
("478","36"):6,
("652","36"):0,
("653","36"):0,
("481","36"):0,
("482","36"):0,
("650","36"):0,
("651","36"):0,
("485","36"):0,
("486","36"):0,
("488","36"):2,
("489","36"):10,
("492","36"):0,
("494","36"):100,
("495","36"):20,
("497","36"):0,
("499","36"):0,
("500","36"):2,
("501","36"):3,
("434","5"):5,
("435","5"):5,
("655","5"):5,
("437","5"):2,
("439","5"):2,
("587","5"):6,
("443","5"):2,
("659","5"):5,
("449","5"):0,
("451","5"):4,
("453","5"):4,
("455","5"):4,
("457","5"):4,
("459","5"):0,
("461","5"):2,
("464","5"):2,
("466","5"):0,
("468","5"):2,
("470","5"):0,
("476","5"):0,
("477","5"):20,
("478","5"):6,
("652","5"):0,
("653","5"):0,
("481","5"):0,
("482","5"):0,
("650","5"):0,
("651","5"):0,
("485","5"):0,
("486","5"):0,
("488","5"):2,
("489","5"):10,
("492","5"):0,
("494","5"):100,
("495","5"):20,
("497","5"):0,
("499","5"):0,
("500","5"):2,
("501","5"):3,
("434","8"):5,
("435","8"):5,
("655","8"):5,
("437","8"):2,
("439","8"):2,
("587","8"):6,
("443","8"):2,
("659","8"):5,
("449","8"):0,
("451","8"):4,
("453","8"):4,
("455","8"):4,
("457","8"):4,
("459","8"):0,
("461","8"):2,
("464","8"):2,
("466","8"):0,
("468","8"):2,
("470","8"):0,
("476","8"):0,
("477","8"):20,
("478","8"):6,
("652","8"):0,
("653","8"):0,
("481","8"):0,
("482","8"):0,
("650","8"):0,
("651","8"):0,
("485","8"):0,
("486","8"):0,
("488","8"):2,
("489","8"):10,
("492","8"):0,
("494","8"):100,
("495","8"):20,
("497","8"):0,
("499","8"):0,
("500","8"):2,
("501","8"):3,
("434","27"):3,
("435","27"):3,
("655","27"):6,
("437","27"):2,
("439","27"):2,
("587","27"):6,
("443","27"):2,
("659","27"):3,
("449","27"):0,
("451","27"):2,
("453","27"):2,
("455","27"):0,
("457","27"):0,
("459","27"):0,
("461","27"):2,
("464","27"):2,
("466","27"):0,
("468","27"):2,
("470","27"):0,
("476","27"):0,
("477","27"):6,
("478","27"):0,
("652","27"):2,
("653","27"):2,
("481","27"):2,
("482","27"):5,
("650","27"):10,
("651","27"):5,
("485","27"):5,
("486","27"):5,
("488","27"):2,
("489","27"):0,
("492","27"):10,
("494","27"):50,
("495","27"):20,
("497","27"):0,
("499","27"):0,
("500","27"):1,
("501","27"):2,
("434","31"):3,
("435","31"):3,
("655","31"):6,
("437","31"):2,
("439","31"):2,
("587","31"):6,
("443","31"):2,
("659","31"):3,
("449","31"):0,
("451","31"):2,
("453","31"):2,
("455","31"):0,
("457","31"):0,
("459","31"):0,
("461","31"):2,
("464","31"):2,
("466","31"):0,
("468","31"):2,
("470","31"):0,
("476","31"):0,
("477","31"):6,
("478","31"):0,
("652","31"):2,
("653","31"):2,
("481","31"):2,
("482","31"):5,
("650","31"):10,
("651","31"):5,
("485","31"):5,
("486","31"):5,
("488","31"):2,
("489","31"):0,
("492","31"):10,
("494","31"):50,
("495","31"):20,
("497","31"):0,
("499","31"):0,
("500","31"):1,
("501","31"):2,
("434","26"):3,
("435","26"):3,
("655","26"):6,
("437","26"):2,
("439","26"):2,
("587","26"):6,
("443","26"):2,
("659","26"):3,
("449","26"):0,
("451","26"):2,
("453","26"):2,
("455","26"):0,
("457","26"):0,
("459","26"):0,
("461","26"):2,
("464","26"):2,
("466","26"):0,
("468","26"):2,
("470","26"):0,
("476","26"):0,
("477","26"):6,
("478","26"):0,
("652","26"):2,
("653","26"):2,
("481","26"):2,
("482","26"):5,
("650","26"):10,
("651","26"):5,
("485","26"):5,
("486","26"):5,
("488","26"):2,
("489","26"):0,
("492","26"):10,
("494","26"):50,
("495","26"):20,
("497","26"):0,
("499","26"):0,
("500","26"):1,
("501","26"):2,
("434","20"):1,
("435","20"):1,
("655","20"):1,
("437","20"):1,
("439","20"):1,
("587","20"):0,
("443","20"):1,
("659","20"):0,
("449","20"):3,
("451","20"):0,
("453","20"):10,
("455","20"):10,
("457","20"):3,
("459","20"):10,
("461","20"):0,
("464","20"):0,
("466","20"):3,
("468","20"):0,
("470","20"):3,
("476","20"):5,
("477","20"):0,
("478","20"):0,
("652","20"):0,
("653","20"):0,
("481","20"):0,
("482","20"):0,
("650","20"):0,
("651","20"):0,
("485","20"):0,
("486","20"):0,
("488","20"):0,
("489","20"):0,
("492","20"):0,
("494","20"):0,
("495","20"):0,
("497","20"):20,
("499","20"):10,
("500","20"):2,
("501","20"):2,
("434","24"):1,
("435","24"):1,
("655","24"):1,
("437","24"):1,
("439","24"):1,
("587","24"):0,
("443","24"):1,
("659","24"):0,
("449","24"):3,
("451","24"):0,
("453","24"):10,
("455","24"):10,
("457","24"):3,
("459","24"):10,
("461","24"):0,
("464","24"):0,
("466","24"):3,
("468","24"):0,
("470","24"):3,
("476","24"):5,
("477","24"):0,
("478","24"):0,
("652","24"):0,
("653","24"):0,
("481","24"):0,
("482","24"):0,
("650","24"):0,
("651","24"):0,
("485","24"):0,
("486","24"):0,
("488","24"):0,
("489","24"):0,
("492","24"):0,
("494","24"):0,
("495","24"):0,
("497","24"):20,
("499","24"):10,
("500","24"):2,
("501","24"):2,
("434","19"):1,
("435","19"):1,
("655","19"):1,
("437","19"):1,
("439","19"):1,
("587","19"):0,
("443","19"):1,
("659","19"):0,
("449","19"):3,
("451","19"):0,
("453","19"):10,
("455","19"):10,
("457","19"):3,
("459","19"):10,
("461","19"):0,
("464","19"):0,
("466","19"):3,
("468","19"):0,
("470","19"):3,
("476","19"):5,
("477","19"):0,
("478","19"):0,
("652","19"):0,
("653","19"):0,
("481","19"):0,
("482","19"):0,
("650","19"):0,
("651","19"):0,
("485","19"):0,
("486","19"):0,
("488","19"):0,
("489","19"):0,
("492","19"):0,
("494","19"):0,
("495","19"):0,
("497","19"):20,
("499","19"):10,
("500","19"):2,
("501","19"):2,
("434","18"):1,
("435","18"):1,
("655","18"):1,
("437","18"):1,
("439","18"):1,
("587","18"):0,
("443","18"):1,
("659","18"):0,
("449","18"):3,
("451","18"):0,
("453","18"):10,
("455","18"):10,
("457","18"):3,
("459","18"):10,
("461","18"):0,
("464","18"):0,
("466","18"):3,
("468","18"):0,
("470","18"):3,
("476","18"):5,
("477","18"):0,
("478","18"):0,
("652","18"):0,
("653","18"):0,
("481","18"):0,
("482","18"):0,
("650","18"):0,
("651","18"):0,
("485","18"):0,
("486","18"):0,
("488","18"):0,
("489","18"):0,
("492","18"):0,
("494","18"):0,
("495","18"):0,
("497","18"):20,
("499","18"):10,
("500","18"):2,
("501","18"):2,
}

# ---- Connect to DB ----
def export_min_qty_inventory():
    conn = psycopg2.connect(
        host="aws-0-ap-southeast-1.pooler.supabase.com",
        port=5432,
        database="postgres",
        user="postgres.jyuynhxfjqswclroeurq",
        password="xaTxM7aJSH34q4vM"
    )
    cur = conn.cursor()

    # Product name mapping
    product_name_map = {}
    cur.execute('SELECT "id", "name" FROM "TblProductInventory"')
    for pid, pname in cur.fetchall():
        product_name_map[str(pid)] = pname

    cur.execute('''
        SELECT
            "batchModalid",
            "productInventoryId",
            "outletId",
            "stock_count",
            "batch_number",
            "expiry_date",
            "batch_remark"
        FROM "TblBatchModal"
    ''')
    rows = cur.fetchall()
    cur.close()
    conn.close()

    report_per_outlet = {}
    for (
        batchModalid, productInventoryId, outletId,
        stock_count, batch_number, expiry_date, batch_remark
    ) in rows:
        outletId_str = str(outletId)
        productId_str = str(productInventoryId)
        min_qty = min_qty_settings.get((productId_str, outletId_str))
        if min_qty is not None and stock_count <= min_qty:
            record = {
                "productInventoryId": productInventoryId,
                "stock_count": stock_count,
                "Product Name": product_name_map.get(productId_str, ""),
                "batchModalid": batchModalid,
                "batch_remark": batch_remark,
                "batch_number": batch_number,
                "expiry_date": expiry_date,
                "min_qty": min_qty,
                "Outlet Name": outlet_ids.get(outletId_str, outletId_str)
            }
            report_per_outlet.setdefault(outletId_str, []).append(record)

    csv_files = []
    today = datetime.now().strftime("%Y%m%d")
    header = [
        "productInventoryId", "stock_count", "Product Name", "batchModalid",
        "batch_remark", "batch_number", "expiry_date", "min_qty", "Outlet Name"
    ]
    def safe_filename_part(s):
        return str(s).replace(" ", "_").replace("/", "_")
    for outlet_id, records in report_per_outlet.items():
        if records:
            outlet_name = outlet_ids.get(outlet_id, outlet_id)
            safe_outlet_name = safe_filename_part(outlet_name)
            filename = f"outlet_{safe_outlet_name}_minstock_{today}.csv"
            csv_files.append(filename)
            with open(filename, "w", newline="", encoding="utf-8") as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=header)
                writer.writeheader()
                for row in records:
                    writer.writerow(row)
            print(f"Wrote {filename}")

    zipname = None
    if csv_files:
        zipname = f"min_stock_report_{today}.zip"
        with zipfile.ZipFile(zipname, "w") as myzip:
            for fname in csv_files:
                myzip.write(fname)
        print(f"Created ZIP archive: {zipname}")
    else:
        print("No products at/below min stock for any outlet.")

    return zipname

if __name__ == "__main__":
    export_min_qty_inventory()
